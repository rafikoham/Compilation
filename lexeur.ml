# 1 "lexeur.mll"
 
	open Parseur
	exception Eof
	exception TokenInconu

# 8 "lexeur.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\240\255\241\255\242\255\243\255\000\000\000\000\246\255\
    \247\255\248\255\249\255\250\255\251\255\252\255\023\000\254\255\
    \002\000\037\000\000\000\000\000\245\255\000\000\000\000\001\000\
    \244\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\015\000\015\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\
    \000\000\002\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\016\000\016\000\016\000\016\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\004\000\016\000\000\000\000\000\011\000\000\000\000\000\
    \008\000\007\000\009\000\013\000\000\000\012\000\000\000\010\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\000\000\015\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\017\000\005\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\000\000\000\000\000\000\006\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\
    \000\000\021\000\000\000\000\000\000\000\020\000\024\000\000\000\
    \000\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
    \000\000\000\000\018\000\023\000\000\000\019\000\000\000\000\000\


    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\016\000\016\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\016\000\255\255\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\014\000\000\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\255\255\255\255\255\255\000\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\255\255\
    \255\255\005\000\255\255\255\255\255\255\019\000\023\000\255\255\
    \255\255\255\255\255\255\255\255\021\000\255\255\255\255\255\255\
    \255\255\255\255\006\000\022\000\255\255\018\000\255\255\255\255\


    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";



let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 -># 8 "lexeur.mll"(token lexbuf)
	| 1 -># 9 "lexeur.mll"(PT_VIRG) # 127 "lexeur.ml"
	| 2 -> let  # 10 "lexeur.mll" lexem # 133 "lexeur.ml"
					= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 10 "lexeur.mll"
                                        (NOMBRE( float_of_string lexem))
# 137 "lexeur.ml"

  	| 3 -># 11 "lexeur.mll"(PLUS)
# 142 "lexeur.ml"

  	| 4 -> # 12 "lexeur.mll"(MOINS)
# 147 "lexeur.ml"

  	|5 -># 13 "lexeur.mll"(MOD)
# 152 "lexeur.ml"

  	| 6 -># 14 "lexeur.mll"(DIV)
# 157 "lexeur.ml"

  	| 7 -># 15 "lexeur.mll"(FOIS) 
# 162 "lexeur.ml"

  	| 8 -># 16 "lexeur.mll"(GPAREN)
# 167 "lexeur.ml"

  	| 9 -># 17 "lexeur.mll"(DPAREN)
# 172 "lexeur.ml"

  	| 10 -># 18 "lexeur.mll"(BOOLEAN)
# 177 "lexeur.ml"

  	| 11 -># 19 "lexeur.mll"(BOOLEAN)
# 182 "lexeur.ml"

  	| 12 -># 20 "lexeur.mll"(BOOLEAN)
# 187 "lexeur.ml"

  	| 13 -># 21 "lexeur.mll"(BOOLEAN)
# 192 "lexeur.ml"

  	| 14 -># 22 "lexeur.mll"(raise Eof)
# 197 "lexeur.ml"

 	| 15 -># 23 "lexeur.mll"(raise TokenInconu)
# 202 "lexeur.ml"

(*>>>>>>> interpreter

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state
*)
;;

